Q 3.1 Palm OS provides no means of concurrent processing. Discuss three major complications that concurrent processing adds to an operating system. 
A:
1.If an OS supports concurrent processing, it needs a very sophisticated scheduler that decides which process to run on CPU. Implementing a good scheduler that optimizes the CPU utilization is very complicated.

2.If an OS supports concurrent processing, it needs to be able to perform context switch whenever a running process is de-scheduled another ready process process is scheduled. Context switch is a complicated operation.

3. If an OS supports concurrent processing, it needs to have sophisticated virtual memory support so that many processes can use available memory concurrently. This may even involve swapping memory contents to disk, if necessary.

Q 3.6 Describe the differences among short-term, medium-term, and long term scheduling. 
A:
The primary difference among these 3 schedulers is the frequency of execution.

A short-term scheduler selects new process for the CPU frequently. For example, a process may execute for only a few milliseconds before waiting for an I/O request. Because of the short time between executions, the short-term scheduler is fast.

A mid-term scheduler selects new process for the CPU less frequently as compared to the short-term and faster than the long-term scheduler. For example, a process may execute for only a few seconds before waiting for an I/O request.

A long-term scheduler executes much less frequently. It may take minutes between creation of 2 processes. The long-term scheduler may need to be invoked only when a process leaves the system. It can afford to take more time to decide which process should be selected for execution.

Q 3.9 Including the initial parent process, how many processes are created by the program shown in Figure 3.31? 
A:
8 processes get created by the program shown in figure 3.31.

Explanation:
1st "fork();" creates 1 child process
2nd "fork();" creates 2 processes from existing 2 processes. Hence we now have total 4 processes.
3rd "fork();" creates 4 processes from above 4 processes. Hence we now have 8 processes in all.
Thus, 7 new processes and 1 initial parent (main) process gets created.

Q 3.11 Give an example of a situation in which ordinary pipes are more suitable than named pipes and an example of a situation in which named pipes are more suitable than ordinary pipes. 
A:
Ordinary pipes are more suitable where a parent process needs to send data to its child process. Child process inherits the ordinary pipe created by its parent.

Named pipes are necessary if a program has multiple processes that are producing data that needs to be consumed by a consumer process. Only named pipes can be used by more than 2 processes, ordinary pipes cannot be used by more than 2 processes.