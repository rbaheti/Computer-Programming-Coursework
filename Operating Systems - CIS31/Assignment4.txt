Q 4.2 What are two differences between user-level threads and kernel-level threads? Under what circumstances is one type better than the other? 
A:
Differences between user-level threads and kernel-level threads are:

1. User-level threads are threads that are visible to the programmer and are unknown to the kernel. While the kernel-level threads are managed and supported by operating-system kernel.

2. User-level threads are faster to create and manage than are kernel threads, because no intervention from the kernel is required.

When we only have user-level threads, kernel does not know about all these threads. So on a multi-core system, we need to have kernel-level threads in order to use more than one core to run user threads. Hence, in such a case, its not such a good idea to have only kernel-level threads.

If the user programs create way too many threads, then creating and running those many kernel threads will burden the CPU and hence severely affect the performance of the system. Hence, in such a case, its not such a good idea to have only use-level threads.

Q 4.4 What resources are used when a thread is created? How do they differ from those used when a process is created? 
A:
When a thread is created, the attributes, state or the data corresponding to the thread needs to be tracked by the thread library. For example, Linux uses struct task_struct to track all the data about a thread. This consumes system memory.

Thread is smaller than the process, hence it requires fewer resources than process creation. Process creation requires allocation of Process Control block (PCB), which is a large data structure. PCB consists of a memory map, list of open files and environment variables.

Q 4.10 Which of the following components of program state are shared across threads in a multithreaded process?
a. Register values
b. Heap memory
c. Global variables
d. Stack memory 
A:
b. Heap memory
c. Global variables

Q 4.12 As described in Section 4.5.2,Linux does not distinguish between processes and threads. Instead, Linux treatsboth in the same way, allowing a task to be more akin to a process or a thread depending on the set of flags passed to the clone() system call. However, many operating systems—such as Windows XP and Solaris—treat processes and threads differently. Typically, such systems use a notation wherein the data structure for a process contains pointers to the separate threads belonging to the process. Contrast these two approaches for modeling processes and threads within the kernel. 
A:
In systems which do not distinguish between processes and threads, the Operating System code is simpler. For example, a scheduler does not have to distinguish between the process and the thread and does not need to have any special code to determine which threads belong to which process. On the other hand, such simple scheduler may not be able to enforce per-process resource constraints. For example, a process can get larger share of the cpu by creating many more threads than other processes do.This problem is not faced in Operating Systems whose schedulers can distinguish between processes and threads.