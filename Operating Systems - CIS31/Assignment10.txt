10.15 If the operating system knew that a certain application was going to access the file data in a sequential manner, how could it exploit this information to improve performance?
A:
When the disk-access pattern of the application is already known, operating system can prefetch the data from disk even before the application requests the data. This will reduce the turnaround time of future disk input requests of the application, since the data requested is already present in the memory.

10.3 Similarly, some systems support many types o fstructures for a file’s data, while others simply support a stream of bytes.What are the advantages and disadvantages of each approach? 
A:
By having the knowledge of the type and structure of a file, operating system can perform some of its tasks better. For example, if operating system knows that a file is an executable file, it can load different parts of the executable in different parts of memory to improve its run-time behavior. So, this is one advantage of making operating system aware of type of a file.

But, for each type of file, operating system needs to have special logic in it. This increases the complexity and size of operating system code. Also, if some applications want to structure their files in a way not supported by the operating systems, severe problems may result. For example, if an operating system only supports ASCII or binary files, then it would be really hard for an application to store encrypted files because encrypted files look like binary files while they are not.

Supporting files that are simply stream of bytes provides the maximum flexibility to applications and also helps keep operating system code relatively simple.

10.05 Explain the purpose of the open() and close() operations? 
A:
Operating system allows different kinds of operations on a file, e.g. read, write, delete, etc. Each of these operations involve searching the directory for the entry associated with the given file. To avoid this constant searching from each file operations, operating system requires that an open() system call be made before any other operation on a file. During open(), operating system adds an entry for the file being opened file to its open-file table. During every other operation, operating system simply looks up its open-file table to get necessary information about the file before performing the requested operation.

During close(), operating system decrements the open count of the file being closed. When this count becomes 0 for a file, operating system removes entry for the file from its open-file table. This allows operating system to erase entries in its open file table that are no longer needed.

10.11 The open-file table is used to maintain information about files that are currently open. Should the operating system maintain a separate table for each user orjust maintain one table that contains references to files that are currently being accessed by all users? If the same file is being accessed by two differen tprograms or users, should there be separate entries in the open file table?
A:
If operating system maintains a central open-file table that has user-independent or process-independent information about a file in it, then operating system need not maintain a separate open-file table for each user/program. The per-process open-file table can then contain entries for all open files of all users. Each entry in this per-process open-file table can have a reference to the corresponding entry for the file in system-wide open-file table. Whenever one user/process modifies a file, operating system can let other user/process know that the file has been updated just by looking at the system-wide open-file table for the file. This would be very hard to achieve if there were no central open-file table.

When a file is opened by more than 1 processes, there needs to be 1 entry for each process in the open-file table for the file. This is because the entry in the open-file table contains information that is only valid for a specific process e.g. offset from where next read() should be performed.