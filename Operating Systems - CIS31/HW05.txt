5.1 A CPU-scheduling algorithm determines an order for the execution of its scheduled processes. Given n processes to be scheduled on one processor, how many different schedules are possible? Give a formula in terms of n. 
A:
n! (n factorial = n * (n - 1) * (n-2) * .... * 2 * 1) schedules are possible for n processes.

5.3 Suppose that the following processes arrive for execution at the times indicated. Each process will run for the amount of time listed. In answering the questions, use non-preemptive scheduling, and base all decisions on the information you have at the time the decision must be made.

Process: Arrival Time: Burst time:
P1 ---------- 0.0 --------- 8

P2 ---------- 0.4 --------- 4

P3 -----------1.0 --------- 1

a. What is the average turnaround time for these processes with the FCFS scheduling algorithm?
b. What is the average turnaround time for these processes with the SJF scheduling algorithm?
c. The SJF algorithm is supposed to improve performance, but notice that we chose to run process P1 at time 0 because we did not know that two shorter processes would arrive soon. Compute what the average turnaround time will be if the CPU is left idle for the first 1 unit and then SJF is used. Remember that processes P1 and P2 are waiting during this idle time, so their waiting time may increase. This algorithm could be known as future-knowledge scheduling. 
A:
wait time = start time - arrival time
turnaround time = burst time + wait time = finish time - arrival time

a.
turnaround time for P1 = 8
turnaround time for P2 = 11.6
turnaround time for P3 = 12
average turnaround time = (8+11.6+12) / 3 = 10.53

b.
turnaround time for P3 = 1
turnaround time for P2 = 5
turnaround time for P1 = 13
average turnaround time = (1+5+13) / 3 = 6.33

c.
turnaround time for P3 = 1
turnaround time for P2 = 5.6
turnaround time for P1 = 14
average turnaround time = (1+5.6+14) / 3 = 6.86

5.4 What advantage is there in having different time-quantum sizes at different levels of a multi-level queueing system?
A:
There are some processes which require more frequent servicing, such as foreground processes. These processes can be in a queue with small time-quantum. While the processes such as background processes, are computationally intensive which can be in a queue with larger quantum, thus requiring fewer context switches to complete the processing. This makes more efficient use of the CPU.

5.18 Explain the differences in how much the following scheduling algorithms discriminate in favor of short processes:
a. FCFS
b. RR
c. Multilevel feedbackqueues
A:
FCFS - First come first serve scheduling discriminates against short processes because when any short process arrives after a long process, it will have to wait for a long time.

RR - Round robin scheduling treats all processes (short or long) equally. It gives each process equal CPU time. Thus, short processes will leave the system faster as they will finish first.

Multilevel feedback queues work similar to round robin scheduling. It gives equal time to all the processes. Thus, small processes will leave the system first as they will finish first.